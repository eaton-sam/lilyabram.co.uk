<div class="container-fluid">
    <div class="row">
        <div class="col-lg-4 col-md-6">
            <h1>@Project.Name</h1>

            @((MarkupString)Project.Description)
        </div>

        <div class="col-lg-8 col-md-6">
            <div id="carousel" class="carousel slide" style="max-height: calc(100vh - 4em)" data-ride="carousel">
                <div class="carousel-inner">
                    @for (var i = 0; i < Project.ImageUrls.Count; i++)
                    {
                        var i2 = i;
                        var image = Project.ImageUrls[i2];

                        @*<div class="carousel-item back-image @GetSlideCSS(i2)" style="height: 500px; background-image: url('@image')">
                        </div>*@
                        <img class="carousel-item image-fit-contain @GetSlideCSS(i2)" style="max-height: calc(100vh - 4em)" src="@image" />
                    }
                    @foreach (var image in Project.ImageUrls)
                    {

                    }
                </div>
                <a class="carousel-control-prev" href="#carousel" @onclick:preventDefault @onclick="Previous" role="button" data-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="carousel-control-next" href="#carousel" @onclick:preventDefault @onclick="Next" role="button" data-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Project Project { get; set; }

    Dictionary<int, string> SlideCSS { get; set; }

    int LastSlide => Project.ImageUrls.Count - 1;
    int CurrentSlide { get; set; } = 0;
    int? PreviousSlide { get; set; }

    protected override void OnParametersSet()
    {
        SlideCSS = new Dictionary<int, string>()
        {
            [0] = "active"
        };
    }

    string GetSlideCSS(int i)
    {
        SlideCSS.TryGetValue(i, out var value);
        return value;
    }

    void Previous()
    {
        var slide = CurrentSlide - 1;
        if (slide < 0) slide = LastSlide;
        SlideTo(slide);
    }
    void Next()
    {
        var slide = CurrentSlide + 1;
        if (slide > LastSlide) slide = 0;
        SlideTo(slide);
    }

    void SlideTo(int i)
    {
        PreviousSlide = CurrentSlide;
        CurrentSlide = i;
        SlideCSS[PreviousSlide.Value] = "";
        SlideCSS[CurrentSlide] = "active";
        StateHasChanged();
    }
}
